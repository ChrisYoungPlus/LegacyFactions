package com.massivecraft.legacyfactions.listeners;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockFromToEvent;
import org.bukkit.event.player.PlayerTeleportEvent;

import com.massivecraft.legacyfactions.FLocation;
import com.massivecraft.legacyfactions.entity.Board;
import com.massivecraft.legacyfactions.entity.Conf;
import com.massivecraft.legacyfactions.entity.Faction;

public class FactionsExploitListener implements Listener {

	// ----------------------------------------
	// INSTANCE
	// ----------------------------------------

	private static FactionsExploitListener i = new FactionsExploitListener();
	public static FactionsExploitListener get() { return i; }
	
	// ----------------------------------------
	// OBSIDIAN GENERATORS
	// ----------------------------------------
	
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void blockObsidianGenerators(BlockFromToEvent event) {
        if (!Conf.handleExploitObsidianGenerators) {
            return;
        }

        Block block = event.getToBlock();
        Material source = event.getBlock().getType();
        Material target = block.getType();
        if ((target == Material.REDSTONE_WIRE || target == Material.TRIPWIRE) &&(source == Material.AIR || source == Material.LAVA || source == Material.STATIONARY_LAVA)) {
            block.setType(Material.AIR);
        }
    }

	// ----------------------------------------
	// ENDER PEARL CLIPPING
	// ----------------------------------------
    
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void blockEnderPearlTeleport(PlayerTeleportEvent event) {
        if (!Conf.handleExploitEnderPearlClipping) {
            return;
        }
        
        if (event.getCause() != PlayerTeleportEvent.TeleportCause.ENDER_PEARL) {
            return;
        }

        // this exploit works when the target location is within 0.31 blocks or so of a door or glass block or similar...
        Location target = event.getTo();
        Location from = event.getFrom();

        // blocks who occupy less than 1 block width or length wise need to be handled differently
        Material mat = event.getTo().getBlock().getType();
        if (((mat == Material.THIN_GLASS || mat == Material.IRON_FENCE) && clippingThrough(target, from, 0.65)) || ((mat == Material.FENCE || mat == Material.NETHER_FENCE) && clippingThrough(target, from, 0.45))) {
            event.setTo(from);
            return;
        }

        // simple fix otherwise: ender pearl target locations are standardized to be in the center (X/Z) of the target block, not at the edges
        target.setX(target.getBlockX() + 0.5);
        target.setZ(target.getBlockZ() + 0.5);
        event.setTo(target);
    }

    public static boolean clippingThrough(Location target, Location from, double thickness) {
        return ((from.getX() > target.getX() && (from.getX() - target.getX() < thickness)) || (target.getX() > from.getX() && (target.getX() - from.getX() < thickness)) || (from.getZ() > target.getZ() && (from.getZ() - target.getZ() < thickness)) || (target.getZ() > from.getZ() && (target.getZ() - from.getZ() < thickness)));
    }
    
	// ----------------------------------------
	// LIQUID FLOW
	// ----------------------------------------
    
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    public void onBlockFromTo(BlockFromToEvent event) {
        if (!Conf.handleExploitLiquidFlow) {
            return;
        }
        if (event.getBlock().isLiquid()) {
            if (event.getToBlock().isEmpty()) {
                Faction from = Board.getInstance().getFactionAt(new FLocation(event.getBlock()));
                Faction to = Board.getInstance().getFactionAt(new FLocation(event.getToBlock()));
                if (from == to) {
                    // not concerned with inter-faction events
                    return;
                }
                // from faction != to faction
                if (to.isNormal()) {
                    if (from.isNormal() && from.getRelationTo(to).isAlly()) {
                        return;
                    }
                    event.setCancelled(true);
                }
            }
        }
    }
}
